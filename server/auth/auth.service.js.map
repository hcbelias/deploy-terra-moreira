{"version":3,"sources":["auth/auth.service.js"],"names":["isAuthenticated","hasRole","signToken","setTokenCookie","hasPermissionToEdit","hasPermissionToAddEntity","validateJwt","secret","secrets","session","use","req","res","next","query","hasOwnProperty","headers","authorization","access_token","roleRequired","Error","meetsRequirements","userRoles","indexOf","user","role","status","send","id","sign","_id","expiresIn","cookie","redirect","hasPermission","userData","username","message"],"mappings":"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","file":"auth/auth.service.js","sourcesContent":["'use strict';\r\n\r\nimport passport from 'passport';\r\nimport config from '../config/environment';\r\nimport jwt from 'jsonwebtoken';\r\nimport expressJwt from 'express-jwt';\r\nimport compose from 'composable-middleware';\r\n\r\nvar validateJwt = expressJwt({\r\n  secret: config.secrets.session\r\n});\r\n\r\n/**\r\n * Attaches the user object to the request if authenticated\r\n * Otherwise returns 403\r\n */\r\nexport function isAuthenticated() {\r\n  return compose()\r\n    // Validate jwt\r\n    .use(function (req, res, next) {\r\n      // allow access_token to be passed through query parameter as well\r\n      if (req.query && req.query.hasOwnProperty('access_token')) {\r\n        req.headers.authorization = 'Bearer ' + req.query.access_token;\r\n      }\r\n      validateJwt(req, res, next);\r\n    });\r\n}\r\n\r\n/**\r\n * Checks if the user role meets the minimum requirements of the route\r\n */\r\nexport function hasRole(roleRequired) {\r\n  if (!roleRequired) {\r\n    throw new Error('Required role needs to be set');\r\n  }\r\n\r\n  return compose()\r\n    .use(isAuthenticated())\r\n    .use(function meetsRequirements(req, res, next) {\r\n      if (config.userRoles.indexOf(req.user.role) >=\r\n        config.userRoles.indexOf(roleRequired)) {\r\n        next();\r\n      } else {\r\n        res.status(403).send('Forbidden');\r\n      }\r\n    });\r\n}\r\n\r\n/**\r\n * Returns a jwt token signed by the app secret\r\n */\r\nexport function signToken(id, role) {\r\n  return jwt.sign({\r\n    _id: id,\r\n    role: role\r\n  }, config.secrets.session, {\r\n    expiresIn: 60 * 60 * 5\r\n  });\r\n}\r\n\r\n/**\r\n * Set token cookie directly for oAuth strategies\r\n */\r\nexport function setTokenCookie(req, res) {\r\n  if (!req.user) {\r\n    return res.status(404).send('It looks like you aren\\'t logged in, please try again.');\r\n  }\r\n  res.cookie('token', signToken(req.user._id, req.user.role));\r\n  res.redirect('/');\r\n}\r\n\r\n\r\nexport function hasPermissionToEdit(req, res) {\r\n  return compose()\r\n    .use(isAuthenticated())\r\n    .use(function hasPermission(req, res, next) {\r\n      var userData = req.user;\r\n      if (userData.username === req.user.username || req.user.role === 'admin') {\r\n        next();\r\n      } else {\r\n        res.status(403).send({\r\n          message: 'This user does not have permission to edit.'\r\n        });\r\n      }\r\n    });\r\n}\r\n\r\nexport function hasPermissionToAddEntity(req, res) {\r\n  return compose()\r\n    .use(isAuthenticated())\r\n    .use(function hasPermission(req, res, next) {\r\n      if (req.user.role === 'admin') {\r\n        next();\r\n      } else {\r\n        res.status(403).send({\r\n          message: 'This user does not have permission to edit.'\r\n        });\r\n      }\r\n    });\r\n}\r\n"],"sourceRoot":"/source/"}